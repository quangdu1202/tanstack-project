/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PostsImport } from './routes/posts'
import { Route as CollectionsImport } from './routes/collections'
import { Route as BooksImport } from './routes/books'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as CollectionsIndexImport } from './routes/collections/index'
import { Route as BooksIndexImport } from './routes/books/index'
import { Route as PostsRecommendedImport } from './routes/posts/recommended'
import { Route as PostsPopularImport } from './routes/posts/popular'
import { Route as PostsFollowingImport } from './routes/posts/following'
import { Route as PostsPostIdImport } from './routes/posts/$postId'

// Create/Update Routes

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsRoute = CollectionsImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRoute,
} as any)

const BooksRoute = BooksImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const CollectionsIndexRoute = CollectionsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CollectionsRoute,
} as any)

const BooksIndexRoute = BooksIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BooksRoute,
} as any)

const PostsRecommendedRoute = PostsRecommendedImport.update({
  id: '/recommended',
  path: '/recommended',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPopularRoute = PostsPopularImport.update({
  id: '/popular',
  path: '/popular',
  getParentRoute: () => PostsRoute,
} as any)

const PostsFollowingRoute = PostsFollowingImport.update({
  id: '/following',
  path: '/following',
  getParentRoute: () => PostsRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/books': {
      id: '/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof BooksImport
      parentRoute: typeof rootRoute
    }
    '/collections': {
      id: '/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/posts/following': {
      id: '/posts/following'
      path: '/following'
      fullPath: '/posts/following'
      preLoaderRoute: typeof PostsFollowingImport
      parentRoute: typeof PostsImport
    }
    '/posts/popular': {
      id: '/posts/popular'
      path: '/popular'
      fullPath: '/posts/popular'
      preLoaderRoute: typeof PostsPopularImport
      parentRoute: typeof PostsImport
    }
    '/posts/recommended': {
      id: '/posts/recommended'
      path: '/recommended'
      fullPath: '/posts/recommended'
      preLoaderRoute: typeof PostsRecommendedImport
      parentRoute: typeof PostsImport
    }
    '/books/': {
      id: '/books/'
      path: '/'
      fullPath: '/books/'
      preLoaderRoute: typeof BooksIndexImport
      parentRoute: typeof BooksImport
    }
    '/collections/': {
      id: '/collections/'
      path: '/'
      fullPath: '/collections/'
      preLoaderRoute: typeof CollectionsIndexImport
      parentRoute: typeof CollectionsImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
  }
}

// Create and export the route tree

interface BooksRouteChildren {
  BooksIndexRoute: typeof BooksIndexRoute
}

const BooksRouteChildren: BooksRouteChildren = {
  BooksIndexRoute: BooksIndexRoute,
}

const BooksRouteWithChildren = BooksRoute._addFileChildren(BooksRouteChildren)

interface CollectionsRouteChildren {
  CollectionsIndexRoute: typeof CollectionsIndexRoute
}

const CollectionsRouteChildren: CollectionsRouteChildren = {
  CollectionsIndexRoute: CollectionsIndexRoute,
}

const CollectionsRouteWithChildren = CollectionsRoute._addFileChildren(
  CollectionsRouteChildren,
)

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsFollowingRoute: typeof PostsFollowingRoute
  PostsPopularRoute: typeof PostsPopularRoute
  PostsRecommendedRoute: typeof PostsRecommendedRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsFollowingRoute: PostsFollowingRoute,
  PostsPopularRoute: PostsPopularRoute,
  PostsRecommendedRoute: PostsRecommendedRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/books': typeof BooksRouteWithChildren
  '/collections': typeof CollectionsRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/following': typeof PostsFollowingRoute
  '/posts/popular': typeof PostsPopularRoute
  '/posts/recommended': typeof PostsRecommendedRoute
  '/books/': typeof BooksIndexRoute
  '/collections/': typeof CollectionsIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/following': typeof PostsFollowingRoute
  '/posts/popular': typeof PostsPopularRoute
  '/posts/recommended': typeof PostsRecommendedRoute
  '/books': typeof BooksIndexRoute
  '/collections': typeof CollectionsIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/books': typeof BooksRouteWithChildren
  '/collections': typeof CollectionsRouteWithChildren
  '/posts': typeof PostsRouteWithChildren
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/following': typeof PostsFollowingRoute
  '/posts/popular': typeof PostsPopularRoute
  '/posts/recommended': typeof PostsRecommendedRoute
  '/books/': typeof BooksIndexRoute
  '/collections/': typeof CollectionsIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/books'
    | '/collections'
    | '/posts'
    | '/posts/$postId'
    | '/posts/following'
    | '/posts/popular'
    | '/posts/recommended'
    | '/books/'
    | '/collections/'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/posts/$postId'
    | '/posts/following'
    | '/posts/popular'
    | '/posts/recommended'
    | '/books'
    | '/collections'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/books'
    | '/collections'
    | '/posts'
    | '/posts/$postId'
    | '/posts/following'
    | '/posts/popular'
    | '/posts/recommended'
    | '/books/'
    | '/collections/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BooksRoute: typeof BooksRouteWithChildren
  CollectionsRoute: typeof CollectionsRouteWithChildren
  PostsRoute: typeof PostsRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BooksRoute: BooksRouteWithChildren,
  CollectionsRoute: CollectionsRouteWithChildren,
  PostsRoute: PostsRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/books",
        "/collections",
        "/posts"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/books": {
      "filePath": "books.tsx",
      "children": [
        "/books/"
      ]
    },
    "/collections": {
      "filePath": "collections.tsx",
      "children": [
        "/collections/"
      ]
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/following",
        "/posts/popular",
        "/posts/recommended",
        "/posts/"
      ]
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx",
      "parent": "/posts"
    },
    "/posts/following": {
      "filePath": "posts/following.tsx",
      "parent": "/posts"
    },
    "/posts/popular": {
      "filePath": "posts/popular.tsx",
      "parent": "/posts"
    },
    "/posts/recommended": {
      "filePath": "posts/recommended.tsx",
      "parent": "/posts"
    },
    "/books/": {
      "filePath": "books/index.tsx",
      "parent": "/books"
    },
    "/collections/": {
      "filePath": "collections/index.tsx",
      "parent": "/collections"
    },
    "/posts/": {
      "filePath": "posts/index.tsx",
      "parent": "/posts"
    }
  }
}
ROUTE_MANIFEST_END */
